name: Deploy Backend

on: 
  # Used for dev deployments
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to. Dev is the only valid option.'
        required: true
        default: 'dev' 
        type: choice
        options:
        - dev

  # Used for production deployments
  release:
    types: [published]



jobs:
  # Uses a combination of branch name and event type to determine which environment to deploy the app to
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-environment-step.outputs.environment }}
    steps:
      # Triggers on push to develop or workflow_dispatch to dev
      - name: Determine GitHub Environment
        # set environment to dev as job output
        id: determine-environment-step
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> ${GITHUB_OUTPUT}
          fi

  # Deploys the app to the environment determined by the previous job
  deployment:
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.6.0

      # Caching global npm cache, as we're using pm2 (installed globally) to deploy the app
      # NOTE: the reason we don't want to install pm2 in devDependencies and install all of the project's dependencies here is
      # because the project being built on this CI/CD runner is pointless - pm2 pulls and builds the project from the repo for
      # us on the remote server, so we don't need to install the project's dependencies here.
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Restore global npm cache
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install pm2
        run: npm install -g pm2

      # NOTE: the ssh key is stored in the relevant environment's secrets in the GitHub repo settings
      # The path the key is stored in should correspond to the key this environment is using in the ecosystem.config.js file
      - name: Write SSH key to filesystem for use by pm2
        run: |
          mkdir ~/.ssh
          mkdir ~/.ssh/menklab
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/menklab/dracarys-backend-${{ needs.determine-environment.outputs.environment }}

      # NOTE: the deployment name is (and in any future environments, should be) the same as the environment name
      - name: Deploy to ${{ needs.determine-environment.outputs.environment }} using pm2
        run: pm2 deploy ecosystem.config.js ${{ needs.determine-environment.outputs.environment }}
